# PA1记录

## 开天辟地的篇章

- 主要是从计算机（程序）是个状态机的角度对其有个大概的认知。

<br>

## RTFSC

- 应该是第一次正式阅读PA的框架代码，看着密密麻麻的文件（害怕

- 开始准备第一个客户程序，而**NEMU**是一个用来执行客户程序的程序，先做一些初始化工作

- 运行第一个客户程序（主循环是cpu_exec，模拟CPU工作，即不断更新PC，运行下一条指令，而定义-1应该是最大的运行次数，也足够NEMU运行了）

--- 

> 优雅地退出

当时看完讲义和一些框架代码已经是天昏地暗了，但是还是没有从整体上理解，所以在这个必做题时就想了很久。后来和同学讨论，突然想到要应该是退出时的状态设置问题，done

其实后来想一下，如果从状态机角度理解各个宏观部分，就会很快掌握

---

<br>

## 基础设施

~~实话实说，写完这一章后，除了继续运行c，我就没太用过这个基础设施~~

---

> 实现单步执行，打印寄存器，扫描内存

这里主要是仿照已经有的框架代码，如**help**这一个基础设施，比较简单

虽然只写了一丢丢代码，但确实非常紧张，生怕写错了

---

<br>

## 表达式求值

嗯PA1中最耗时间和心力的part来了

---

> 实现算术表达式的词法分析

也是仿照框架识别各种token。这里一开始以为各种token的type都要用enum枚举，后来发现只有特定的几个需要，其他可以用ASCII码

感谢之前学过正则表达式，感觉捡起来比较轻松

注意一些转义符，例如*\+* 需要写成*\\\\+*等

注意一些相似token的顺序，会影响识别

---

> 实现算术表达式的递归求值

嗯虽然它给了框架，但各种实现细节（（（

注意表达式的长度

---

> 实现带有负数的算术表达式的求值

不带负数的其实还好，带上负数······

在make_token中不先识别负号，统一判断为运算符

然后在**expr**函数中，判断表示式是否合法，以及判断-到底是运算符还是负号（后续的解引用符号也是如此）

反正这一阶段就是不断想各种样例，然后输出中间值检验

--- 

> 实现表达式生成器

总是生成非法的表达式啊啊啊，放弃了

---

<br>

## 监视点

---

> 拓展表达式求值的功能

对于寄存器，本来是一个一个strcmp，但是要写几十行很麻烦。所以到PA2的时候，写成了for循环的形式，如下（虽然效果一样，但是看着顺心多了）
<img src='/img/p1.png'></img>

（交到oj上竟然一次过，感动）

---

> 实现监视点池的管理

这里主要是链表的编程训练我感觉（注意断开链表，空指针等问题应该就ok了）

多测试几次（很可能某些细节不对，指针指向NULL了）

---

> 实现监视点

与之前的基础设施处理相类似

在这里的难点主要是设置menuconfig。一开始没看懂啊啊啊。

按照讲义更改Kconfig文件（可以学一点这种文件的相关设置知识），宏的设置可以仿照框架的设置

---

> sanitizer-一种底层的assert

没想到开了，确实显示我存在内存泄漏的风险 :cry:
后来发现是有一处指针的使用不太对

